input.txt:
MACRO
INC &ARG1
LDA &ARG1
ADD #1
STA &ARG1
MEND
START 100
   INC A 
   HLT
A  DC 5
B  DC 10
END

mnt table:
INC	1

mdt table:
LDA &ARG1
ADD #1
STA &ARG1
MEND

intermediate.txt:
START 100
   INC A 
   HLT
A  DC 5
B  DC 10
END

mac1.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_MNT 50
#define MAX_MDT 100
#define MAX_ALA 10

typedef struct {
    char name[10];
    int mdtIndex; 
} MNTEntry;

typedef struct {
    char definition[50];
} MDTEntry;

MNTEntry MNT[MAX_MNT];  
MDTEntry MDT[MAX_MDT];  
int mntCount = 0, mdtCount = 1;

void storeMacroDefinition(char *line) {
    strcpy(MDT[mdtCount++].definition, line);
}

void processMacroDefinition(FILE *input, FILE *nonMacroFile) {
    char line[100], macroName[10];

    while (fgets(line, sizeof(line), input)) {
        if (strstr(line, "MACRO")) {
            fscanf(input, "%s", macroName);  
            strcpy(MNT[mntCount].name, macroName);
            MNT[mntCount].mdtIndex = mdtCount;
            mntCount++;

            fgets(line, sizeof(line), input); 

            while (fgets(line, sizeof(line), input)) {
                if (strstr(line, "MEND")) {
                    storeMacroDefinition(line);  
                    break;
                }
                storeMacroDefinition(line);  
            }
        } else {
            fprintf(nonMacroFile, "%s", line);  // Write non-macro lines to nput.txt
        }
    }
}

void saveTables() {
    FILE *mntFile = fopen("MNT.txt", "w");
    FILE *mdtFile = fopen("MDT.txt", "w");

    if (!mntFile || !mdtFile) {
        printf("Error opening file for saving tables.\n");
        return;
    }

    for (int i = 0; i < mntCount; i++) {
        fprintf(mntFile, "%s\t%d\n", MNT[i].name, MNT[i].mdtIndex);
    }

    for (int i = 0; i < mdtCount; i++) {
        fprintf(mdtFile, "%s", MDT[i].definition);
    }

    fclose(mntFile);
    fclose(mdtFile);
}

int main() {
    FILE *input = fopen("input.txt", "r");
    FILE *nonMacroFile = fopen("intermediate.txt", "w");  

    if (!input || !nonMacroFile) {
        printf("Error opening file.\n");
        return 1;
    }

    processMacroDefinition(input, nonMacroFile);

    fclose(input);
    fclose(nonMacroFile);

    saveTables();  
    
    return 0;
}





__________________________________________________________________________________________________________________________________________________________

mac2.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


typedef struct {
    char name[10];
    int mdtIndex; 
}mntet;

typedef struct {
    char definition[50]; 
}mdtet;

mntet mnt[50];  
mdtet mdt[100];  
char ALA[10][10]; 
char bl[10][10]; 
int xc[10];
int mntCount = 0, mdtCount = 0;
int alaIndex = 0, c = 0, f = 0;

void trimWhitespace(char *str) {
    char *end;
    while (isspace((unsigned char)*str)) str++; 
    end = str + strlen(str);
    while (end > str && isspace((unsigned char)*(end - 1))) end--; 
    *end = '\0'; 
}

int ca(int i) {
    for (int z = 0; z < alaIndex; z++) {
        if (strcmp(bl[z], ALA[z]) != 0) {
            xc[z] = i;
            return z;
        } else if (xc[z] == i) {
            return z;
        }
    }
}

void lt() {
    FILE *mntFile = fopen("MNT.txt", "r");
    FILE *mdtFile = fopen("MDT.txt", "r");



    while (fscanf(mntFile, "%s %d", mnt[mntCount].name, &mnt[mntCount].mdtIndex) != EOF) {
        mntCount++;
    }
    while (fgets(mdt[mdtCount].definition, sizeof(mdt[mdtCount].definition), mdtFile)) {
        trimWhitespace(mdt[mdtCount].definition); 
        mdtCount++;
    }

    fclose(mntFile);
    fclose(mdtFile);
}

int evaluateCondition(char *condition) {
    char arg[10], op[3], value[10];
    sscanf(condition, "&%s %s %s", arg, op, value);  
    printf("sfds%s %s %s\n",arg,op,value);
    //printf("sfds%s\n",condition);
    for (int i = 0; i < 10; i++) {
        if (strcmp(ALA[i], value) == 0 && strcmp(op, "EQ") == 0) {
            return 1; 
        }
    }
    return 0;  
}

void sag(char *line, FILE *output) {
    char resultLine[100] = "";
    int cnt = 0;
    int foundSubstitution = 0;

    printf("sfl: '%s'\n", line);

    for (int i = 0; i < 10; i++) {
        char formalParam[6];
        sprintf(formalParam, "&ARG%d", i + 1);  

        char *argPos = strstr(line, formalParam);  
        if (argPos != NULL) {
            if (f == 0) {
                strcpy(bl[c], ALA[c]);
                xc[c] = i + 1;
                cnt = 0;
                c++;
                f = 1;
            } else {
                cnt = ca(i + 1);
                strcpy(bl[c], ALA[c]);
                c++;
            }

            printf("subt '%s' with '%s' %d\n", formalParam, ALA[cnt], cnt); 
            strncat(resultLine, line, argPos - line); 
            strcat(resultLine, ALA[cnt]);
            strcat(resultLine, argPos + strlen(formalParam)); 
            strcpy(line, resultLine);
        }
    }

    printf("ALA:\n");
    for (int j = 0; j < 5; j++) {
        printf("ALA[%d]: '%s'\n", j, ALA[j]);
    }

    if (!foundSubstitution) {
        strcpy(resultLine, line); 
    }

    printf("Fls: '%s'\n", resultLine);
    fprintf(output, "%s\n", resultLine);
}

int isMacro(char *name) {
    for (int i = 0; i < mntCount; i++) {
        if (strcmp(name, mnt[i].name) == 0) {
            return 1;
        }
    }
    return 0;
}

int findMDT(char *macroName) {
    for (int i = 0; i < mntCount; i++) {
        if (strcmp(mnt[i].name, macroName) == 0) {
            return mnt[i].mdtIndex;
        }
    }
    return -1;
}

int findLabelInMDT(char *label) {
    for (int i = 0; i < mdtCount; i++) {
        if (strncmp(mdt[i].definition, label, strlen(label)) == 0 && 
            (mdt[i].definition[strlen(label)] == ' ' || mdt[i].definition[strlen(label)] == '\0')) {
            return i;
        }
    }
    return -1;
}

void expandMacro(char *macroName, char *line, FILE *output) {
    char actualArgs[100];
    strcpy(actualArgs, line + strlen(macroName));
    trimWhitespace(actualArgs);

    char *arg = strtok(actualArgs, ", ");
    while (arg != NULL && alaIndex < 10) {
        trimWhitespace(arg);
        int isMacro = findMDT(arg);
        if (isMacro == -1) {
            strcpy(ALA[alaIndex++], arg);
        } else {
            printf("Skipping macro name: '%s' from being added to ALA.\n", arg);
        }
        arg = strtok(NULL, ", ");
    }

    int mdtptr = findMDT(macroName);
    int labelFlag = 0,cf=0;

    while (mdtptr != -1 && strcmp(mdt[mdtptr].definition, "MEND") != 0) {
        char command[10],t[20],t1[20];
        sscanf(mdt[mdtptr].definition, "%s", command);
        int fields=sscanf(mdt[mdtptr].definition,"%s %s ",t,t1);
        printf("Processing mdt[%d]: '%s' %d\n", mdtptr, mdt[mdtptr].definition,fields);
        //printf("Processing mdt[%d]: '%s' \n", mdtptr, mdt[mdtptr].definition);
        if(fields<2 && labelFlag!=1 && cf!=1){
            return;
        }
        else if (labelFlag == 1) {
            labelFlag = 0;
        }else if(cf ==1){
            cf=0;
        } else if (strcmp(command, "AIF") == 0) {
            char condition[50], label[10],c1[50],c2[50];
            sscanf(mdt[mdtptr].definition, "AIF %s %s %s %s", condition,c1,c2, label);
            printf("\ndasd%s %s %s %s %s",condition,label,c1,c2);

            strcat(condition," ");
            strcat(condition,c1);
            strcat(condition," ");
            strcat(condition,c2);
            printf("\ncondition:%s\n",condition);
            if (evaluateCondition(condition)) {
                printf("Condition '%s' is true, jumping to label '%s'.\n", condition, label);
                mdtptr = findLabelInMDT(label);
                if (mdtptr == -1) {
                    printf("Error: Label '%s' not found in mdt.\n", label);
                    break;
                }
                cf=1;
                continue;
            }
        } else if (strcmp(command, "AGO") == 0) {
            char label[10];
            sscanf(mdt[mdtptr].definition, "AGO %s", label);
            printf("Jumping to label '%s'.\n", label);
            mdtptr = findLabelInMDT(label);
            labelFlag = 1;
            if (mdtptr == -1) {
                printf("Error: Label '%s' not found in mdt.\n", label);
                break;
            }
            continue;
        } else if (strcmp(command, "ANOP") == 0) {
            printf("ANOP encountered, skipping this line.\n");
            mdtptr++;
            continue;
        } else {
            char nmn[10];
            sscanf(mdt[mdtptr].definition, "%s", nmn);
            if (findMDT(nmn) != -1) {
                printf("nested macro: '%s'\n", nmn);
                expandMacro(nmn, mdt[mdtptr].definition, output);
            } else {
                sag(mdt[mdtptr].definition, output);
            }
        }
        mdtptr++;
    }

    if (strcmp(mdt[mdtptr].definition, "MEND") == 0) {
        printf("Finished macro: '%s'\n", macroName);
    } else {
        printf("mend missing !! macro '%s'.\n", macroName);
    }
}

int main() {
    FILE *input = fopen("intermediate.txt", "r");
    FILE *output = fopen("output.txt", "w");

    lt();
    char line[100];
    while (fgets(line, sizeof(line), input)) {
        trimWhitespace(line);
        if (strlen(line) > 0) {
            char macroName[10];
            sscanf(line, "%s", macroName);
            if (isMacro(macroName)) {
                expandMacro(macroName, line, output);
            } else {
                fprintf(output, "%s\n", line);
            }
        }
    }

    fclose(input);
    fclose(output);
    return 0;
}



output.txt:
START 100
ADD #1
STA A
   HLT
A  DC 5
B  DC 10
END






macro1.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256
#define MAX_MDT_LINES 100
#define MAX_MNT_LINES 100

// Function to write the Macro Definition Table (MDT) to a file
void writeMDTFile(char mdt[MAX_MDT_LINES][MAX_LINE_LENGTH], int mdtCount) {
    FILE *outFile = fopen("MDT.txt", "w");
    int i;
    if (outFile == NULL) {
        printf("Unable to open MDT file for writing.\n");
        return;
    }
    for (i = 0; i < mdtCount; i++) {
        fprintf(outFile, "%s", mdt[i]);
    }
    fclose(outFile);
    printf("MDT written to MDT.txt\n");
}

// Function to write the Macro Name Table (MNT) to a file
void writeMNTFile(char mnt[MAX_MNT_LINES][MAX_LINE_LENGTH], int mntCount) {
    FILE *outFile = fopen("MNT.txt", "w");
    int i;
    if (outFile == NULL) {
        printf("Unable to open MNT file for writing.\n");
        return;
    }
    for (i = 0; i < mntCount; i++) {
        fprintf(outFile, "%s", mnt[i]);
    }
    fclose(outFile);
    printf("MNT written to MNT.txt\n");
}

// Function to write the Intermediate Code to a file
void writeIntermediateFile(char lines[][MAX_LINE_LENGTH], int startLine, int totalLines) {
    FILE *intermediateFile = fopen("Intermediatecodemacro.txt", "w");
    int i;
    if (intermediateFile == NULL) {
        printf("Unable to open Intermediate file for writing.\n");
        return;
    }
    for (i = startLine; i < totalLines; i++) {
        fprintf(intermediateFile, "%s", lines[i]);
    }
    fclose(intermediateFile);
    printf("Intermediate code written to Intermediatecodemacro.txt\n");
}

// Function to write the Argument List Table (ALT) to a file
void writeALTFile(char alt[MAX_MNT_LINES][MAX_LINE_LENGTH], int altCount) {
    FILE *altFile = fopen("ALT.txt", "w");
    int i;
    if (altFile == NULL) {
        printf("Unable to open ALT file for writing.\n");
        return;
    }
    for (i = 0; i < altCount; i++) {
        fprintf(altFile, "%s", alt[i]);
    }
    fclose(altFile);
    printf("ALT written to ALT.txt\n");
}

void processMacros(const char *inputFileName) {
    FILE *inFile = fopen(inputFileName, "r");
    if (inFile == NULL) {
        printf("Unable to open input file.\n");
        return;
    }

    char line[MAX_LINE_LENGTH];
    char mdt[MAX_MDT_LINES][MAX_LINE_LENGTH];
    char mnt[MAX_MNT_LINES][MAX_LINE_LENGTH];
    char alt[MAX_MNT_LINES][MAX_LINE_LENGTH];
    char allLines[MAX_MNT_LINES][MAX_LINE_LENGTH];
    
    int mdtIndex = 1;
    int mdtCount = 0;
    int mntCount = 0;
    int altCount = 0;
    int lineCount = 0;
    int lastMendLine = -1;

    while (fgets(line, sizeof(line), inFile)) {
        snprintf(allLines[lineCount++], MAX_LINE_LENGTH, "%s", line);

        if (strstr(line, "MACRO") != NULL) {
            int argumentIndex = 1;
            if (fgets(line, sizeof(line), inFile)) {
                snprintf(allLines[lineCount++], MAX_LINE_LENGTH, "%s", line);

                char macroName[MAX_LINE_LENGTH];
                sscanf(line, "%s", macroName);
                snprintf(mnt[mntCount++], MAX_LINE_LENGTH, "%d   %s\n", mdtIndex, macroName);
                snprintf(mdt[mdtCount++], MAX_LINE_LENGTH, "%d   %s", mdtIndex++, line);

                while (fgets(line, sizeof(line), inFile)) {
                    snprintf(allLines[lineCount++], MAX_LINE_LENGTH, "%s", line);
                    if (strstr(line, "MEND") != NULL) {
                        snprintf(mdt[mdtCount++], MAX_LINE_LENGTH, "%d   %s", mdtIndex++, line);
                        lastMendLine = lineCount;
                        break;
                    }

                    char tempLine[MAX_LINE_LENGTH];
                    strcpy(tempLine, line);
                    char *token = strtok(tempLine, " ,");
                    while (token != NULL) {
                        if (token[0] == '&') {
                            char *equalPos = strchr(token, '=');
                            if (equalPos != NULL) {
                                *equalPos = '\0'; 
                                char *paramName = token;
                                char *paramValue = equalPos + 1;

                                snprintf(alt[altCount++], MAX_LINE_LENGTH, "%d   %s = %s\n", argumentIndex++, paramName, paramValue);

                                char *pos = strstr(line, paramName);
                                if (pos != NULL) {
                                    strncpy(pos, paramValue, strlen(paramValue));
                                }
                            } else {
                                snprintf(alt[altCount++], MAX_LINE_LENGTH, "%d   %s\n", argumentIndex++, token);
                                char indexedParam[MAX_LINE_LENGTH];
                                snprintf(indexedParam, sizeof(indexedParam), "#%d", argumentIndex - 1);
                                char *pos = strstr(line, token);
                                if (pos != NULL) {
                                    strncpy(pos, indexedParam, strlen(indexedParam));
                                }
                            }
                        }
                        token = strtok(NULL, " ,");
                    }
                    snprintf(mdt[mdtCount++], MAX_LINE_LENGTH, "%d   %s", mdtIndex++, line);
                }
            }
        }
    }
    fclose(inFile);

    // Uncomment this section to generate MDT
    // writeMDTFile(mdt, mdtCount);

    // Uncomment this section to generate MNT
    // writeMNTFile(mnt, mntCount);

    // Uncomment this section to generate ALT
    // writeALTFile(alt, altCount);

    // Uncomment this section to generate Intermediate Code
    if (lastMendLine != -1 && lastMendLine < lineCount) {
         // writeIntermediateFile(allLines, lastMendLine, lineCount);
    } else {
        printf("No intermediate code found after the last MEND.\n");
    }
}

int main() {
    const char *inputFileName = "macro.txt";
    processMacros(inputFileName);
    return 0;
}

/*
macroinput.txt

MACRO
ADD &ARG1, &ARG2
LOAD &ARG1
ADD &ARG2
STORE RESULT
MEND

MACRO
SUBTRACT &ARG1, &ARG2
LOAD &ARG1
SUB &ARG2
STORE RESULT
MEND

START
ADD NUM1, NUM2
SUBTRACT NUM3, NUM4
END

*/





macro2.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256
#define MAX_MDT_LINES 100
#define MAX_MNT_LINES 100
#define MAX_ALT_LINES 10 
#define MAX_EXPANDED_LINES 500

void readFileToArray(const char *fileName, char array[][MAX_LINE_LENGTH], int *count) {
    FILE *file = fopen(fileName, "r");
    if (file == NULL) {
        printf("Unable to open file: %s\n", fileName);
        return;
    }
    char line[MAX_LINE_LENGTH];
    *count = 0;
    while (fgets(line, sizeof(line), file)) {
        strcpy(array[(*count)++], line);
    }
    fclose(file);
}

void writeExpandedCodeFile(char expanded[MAX_EXPANDED_LINES][MAX_LINE_LENGTH], int expandedCount) {
    FILE *outFile = fopen("ExpandedCode.txt", "w");
    int i;
    if (outFile == NULL) {
        printf("Unable to open ExpandedCode file for writing.\n");
        return;
    }
    for (i = 0; i < expandedCount; i++) {
        fprintf(outFile, "%s", expanded[i]);
    }
    fclose(outFile);
    printf("Expanded code written to ExpandedCode.txt\n");
}

int findMacroDefinition(char mnt[MAX_MNT_LINES][MAX_LINE_LENGTH], int mntCount, const char *macroName) {
    int i;
    for (i = 0; i < mntCount; i++) {
        char name[MAX_LINE_LENGTH];
        int mdtIndex;
        sscanf(mnt[i], "%d %s", &mdtIndex, name);
        if (strcmp(name, macroName) == 0) {
            return mdtIndex;
        }
    }
    return -1;
}

void substituteArguments(char *line, char actualArgs[MAX_ALT_LINES][MAX_LINE_LENGTH], int actualArgCount) {
    char placeholder[MAX_LINE_LENGTH];
    int i;
    
    for (i = 0; i < actualArgCount; i++) {
        sprintf(placeholder, "#%d", i + 1);  
        char *pos = strstr(line, placeholder);
        while (pos != NULL) {
            char temp[MAX_LINE_LENGTH];
            strncpy(temp, line, pos - line);
            temp[pos - line] = '\0';
            strcat(temp, actualArgs[i]);
            strcat(temp, pos + strlen(placeholder));
            strcpy(line, temp);
            pos = strstr(line, placeholder);  
        }
    }
}

void expandMacro(char mdt[MAX_MDT_LINES][MAX_LINE_LENGTH], int mdtIndex, char actualArgs[MAX_ALT_LINES][MAX_LINE_LENGTH], int actualArgCount, char expanded[MAX_EXPANDED_LINES][MAX_LINE_LENGTH], int *expandedCount) {
    while (strstr(mdt[mdtIndex], "MEND") == NULL) {
        char line[MAX_LINE_LENGTH];
        strcpy(line, mdt[mdtIndex]);

        char *instructionStart = strchr(line, ' ');
        if (instructionStart != NULL) {
            strcpy(line, instructionStart + 1);  
        }

        substituteArguments(line, actualArgs, actualArgCount);

        strcpy(expanded[(*expandedCount)++], line);  
        mdtIndex++;  
    }
}

void processPass2(const char *intermediateFileName, char mnt[MAX_MNT_LINES][MAX_LINE_LENGTH], int mntCount, char mdt[MAX_MDT_LINES][MAX_LINE_LENGTH]) {
    FILE *intermediateFile = fopen(intermediateFileName, "r");
    if (intermediateFile == NULL) {
        printf("Unable to open intermediate file.\n");
        return;
    }

    char expanded[MAX_EXPANDED_LINES][MAX_LINE_LENGTH];
    int expandedCount = 0;
    char line[MAX_LINE_LENGTH];

    while (fgets(line, sizeof(line), intermediateFile)) {
        char macroName[MAX_LINE_LENGTH];
        int foundMacro = 0;

        sscanf(line, "%s", macroName);
        int mdtIndex = findMacroDefinition(mnt, mntCount, macroName);
        if (mdtIndex != -1) {
            foundMacro = 1;

            char *start = strchr(line, ' ');
            char actualArgs[MAX_ALT_LINES][MAX_LINE_LENGTH];
            int actualArgCount = 0;
            if (start != NULL) {
                start++;
                char *token = strtok(start, " ,\n");
                while (token != NULL) {
                    strcpy(actualArgs[actualArgCount++], token);
                    token = strtok(NULL, " ,\n");
                }
            }

            expandMacro(mdt, mdtIndex, actualArgs, actualArgCount, expanded, &expandedCount);
        }

        if (!foundMacro) {
            strcpy(expanded[expandedCount++], line);
        }
    }

    fclose(intermediateFile);

    writeExpandedCodeFile(expanded, expandedCount);
}

int main() {
    char mnt[MAX_MNT_LINES][MAX_LINE_LENGTH];
    char mdt[MAX_MDT_LINES][MAX_LINE_LENGTH];

    int mntCount, mdtCount;

    readFileToArray("E:\\SEM 5\\SP\\aasign_5_macro_def\\MNT.txt", mnt, &mntCount);
    readFileToArray("E:\\SEM 5\\SP\\aasign_5_macro_def\\MDT.txt", mdt, &mdtCount);

    processPass2("E:\\SEM 5\\SP\\aasign_5_macro_def\\Intermediatecodemacro.txt", mnt, mntCount, mdt);

    return 0;\
}

/*

intermidiate

START
ADD NUM1, NUM2
SUBTRACT NUM3, NUM4
END

MNT:

1   ADD
6   SUBTRACT

MDT:

1   ADD &ARG1, &ARG2
2   LOAD #1RG1
3   ADD #2RG2
4   STORE RESULT
5   MEND
6   SUBTRACT &ARG1, &ARG2
7   LOAD #1RG1
8   SUB #2RG2
9   STORE RESULT
10   MEND

input(reference)
macroinput.txt

MACRO
ADD &ARG1, &ARG2
LOAD &ARG1
ADD &ARG2
STORE RESULT
MEND

MACRO
SUBTRACT &ARG1, &ARG2
LOAD &ARG1
SUB &ARG2
STORE RESULT
MEND

START
ADD NUM1, NUM2
SUBTRACT NUM3, NUM4
END

*/








